import org.codehaus.groovy.runtime.GStringImpl

plugins {
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'io.franzbecker.gradle-lombok' version '3.3.0'
    id "org.sonarqube" version "2.8"
    id 'java'
    id "com.github.breadmoirai.github-release" version "2.2.12"
    id 'jacoco'
}

ext {
    winswVersion = '2.7.0'
    winswNetVersion = 'net4'
    winswBuildDir = "${project.buildDir}/windows-service"
    releaseBuildDir = "${project.buildDir}/release-build"
}

ext.gitBranchName = {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

group 'io.oscript'
version '1.0.0'
description "Java реализация сервера пакетов OneScript"

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    mavenCentral()
    maven {
        url 'http://repo.jenkins-ci.org/releases/'
    }
}

jar {
    enabled = true
}

bootJar {
//    https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/gradle-plugin/reference/html/#packaging-executable
    excludeDevtools = true
    classifier = 'boot'
    launchScript()
}

lombok {
    version = '1.18.12'
    sha256 = ""
}

configurations {
    winsw { transitive = false }
}

sourceSets {
    main {
        java {}
        resources {}
    }
    test {
        java {}
        resources {}
    }
}

dependencies {

    // region Spring boot core
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'

    implementation group: 'org.kohsuke', name: 'github-api', version: '1.111'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.3.9'

    // endregion

    // region Test & debug
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
    testImplementation 'org.assertj:assertj-core:3.11.1'
    testImplementation "org.mockito:mockito-core:2.+"

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // endregion

    winsw "com.sun.winsw:winsw:${winswVersion}:${winswNetVersion}@exe"
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled = true
        xml.destination = new File("$buildDir/jacoco/report.xml")
        html.enabled = true
        html.destination = new File("$buildDir/jacoco/html")
    }
}

wrapper {
    gradleVersion = '6.3'
}

sonarqube {
    properties {
        property "sonar.projectKey", "alkoleft_opm-jhub"
//        property "sonar.branch.name", gitBranchName()
        property "sonar.organization", "alkoleft"
        property "sonar.java.source", "1.11"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", sonarQubeApiToken
        property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/jacoco/report.xml"
    }
}

task buildRelease {
    group = 'build'
    description = 'Сборка релиза'
    dependsOn('bootJar')
    dependsOn('winswCreateArchive')
    copy {
        from "${project.buildDir}/libs/${project.name}-${version}-boot.jar"
        into "${releaseBuildDir}"
    }
}

task winswCreateFiles(dependsOn: 'bootJar', type: Copy) {
    group = 'winsw'
    description = 'Spring Boot winsw build'
    dependsOn('bootJar')
    def outPath = winswBuildDir

    from configurations.winsw
    from "${project.buildDir}/libs/"
    from "${rootProject.rootDir}/asService/win"
    from "${rootProject.rootDir}/asService/logback.xml"
    into "${outPath}"
    rename "winsw-${winswVersion}-${winswNetVersion}.exe", "${project.name}.exe"
    rename "${project.name}-${version}-boot.jar", "${project.name}-boot.jar"
}

task winswCreateArchive(type: Zip) {
    dependsOn('winswCreateFiles')
    archiveFileName = "${project.name}-${version}-WinService.zip"
    destinationDirectory = file(releaseBuildDir)

    from winswBuildDir
}

githubRelease {
    token "${githubApiToken}" // This is your personal access token with Repo permissions
    // You get this from your user settings > developer settings > Personal Access Tokens
    owner "alkoleft"
    // default is the last part of your group. Eg group: "com.github.breadmoirai" => owner: "breadmoirai"
    repo "opm-jhub" // by default this is set to your project name
    tagName "v${version}" // by default this is set to "v${project.version}"
    targetCommitish "master" // by default this is set to "master"
    releaseName "v${version}" // Release title, by default this is the same as the tagName
    body file("${rootProject.rootDir}/docs/release-notes/v${version}.md").text
    draft true // by default this is false
    prerelease true // by default this is false
//    releaseAssets file(releaseBuildDir).listFiles() // this points to which files you want to upload as assets with your release

    overwrite true // by default false; if set to true, will delete an existing release with the same tag and name
    dryRun false // by default false; you can use this to see what actions would be taken without making a release
    apiEndpoint "https://api.github.com" // should only change for github enterprise users
    client // This is the okhttp client used for http requests
}